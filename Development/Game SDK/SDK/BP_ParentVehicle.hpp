#ifndef UE4SS_SDK_BP_ParentVehicle_HPP
#define UE4SS_SDK_BP_ParentVehicle_HPP

class ABP_ParentVehicle_C : public APawn
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UAudioComponent* ExhaustAudio;
    class UStaticMeshComponent* RefuelStaticMesh;
    class UVoxelSimpleInvokerComponent* VoxelInvoker;
    class UStaticMeshComponent* FuelLevel;
    class UStaticMeshComponent* TruckLights;
    class UStaticMeshComponent* PlayerCollision;
    class USpotLightComponent* ReverseLightRight;
    class USpotLightComponent* ReverseLightLeft;
    class UCameraComponent* Camera;
    class USceneComponent* CameraAnchor;
    class USceneComponent* VehicleExitPoint;
    class UStaticMeshComponent* WheelMeshBR;
    class UStaticMeshComponent* WheelMeshBL;
    class UStaticMeshComponent* WheelMeshFR;
    class UStaticMeshComponent* WheelMeshFL;
    class USceneComponent* WheelBR;
    class USceneComponent* WheelBL;
    class USceneComponent* WheelFR;
    class USceneComponent* WheelFL;
    class UAudioComponent* ReverseBeep;
    class UPointLightComponent* FuelEmptyLight;
    class UAudioComponent* FuelEmptyAudio;
    class UPointLightComponent* BrakeLightRight;
    class UPointLightComponent* BrakeLightLeft;
    class UNiagaraComponent* Exhaust;
    class UAudioComponent* EngineAudio;
    class USpringArmComponent* SpringArm;
    class UStaticMeshComponent* Body;
    class USceneComponent* TraceBR;
    class USceneComponent* TraceBL;
    class USceneComponent* TraceFR;
    class USceneComponent* TraceFL;
    class UFloatingPawnMovement* MovementComponent;
    float Fuel_Light_Bleep_Intensity_04ADEAC54F4882E7F34D7C91084AF6BB;
    TEnumAsByte<ETimelineDirection::Type> Fuel_Light_Bleep__Direction_04ADEAC54F4882E7F34D7C91084AF6BB;
    class UTimelineComponent* Fuel Light Bleep;
    float CamTransition_Progress_B2F62E0F484C3C136FDFBBA19151F19B;
    TEnumAsByte<ETimelineDirection::Type> CamTransition__Direction_B2F62E0F484C3C136FDFBBA19151F19B;
    class UTimelineComponent* CamTransition;
    float BlendFuelSFX_Blend_18BDD7304D1E08455C822E9595B17EF8;
    TEnumAsByte<ETimelineDirection::Type> BlendFuelSFX__Direction_18BDD7304D1E08455C822E9595B17EF8;
    class UTimelineComponent* BlendFuelSFX;
    float TurnOnHeadlights_Attenuation_30864BD34CB7D4A5FAC9B0886E0EB265;
    float TurnOnHeadlights_Intensity_30864BD34CB7D4A5FAC9B0886E0EB265;
    TEnumAsByte<ETimelineDirection::Type> TurnOnHeadlights__Direction_30864BD34CB7D4A5FAC9B0886E0EB265;
    class UTimelineComponent* TurnOnHeadlights;
    TArray<FS_VehWheelData> WheelData;
    TArray<FS_VehSuspensionData> SuspensionData;
    TArray<class USceneComponent*> TraceOrigins;
    TArray<class USceneComponent*> WheelComponents;
    TArray<float> RayLength;
    TArray<bool> RayBlockingHits;
    TArray<FHitResult> RayHitResults;
    TArray<float> ForceX;
    TArray<float> ForceY;
    TArray<float> ForceZ;
    TArray<float> Length;
    TArray<float> LastLength;
    TArray<FVector> WheelLinearVelocityLocal;
    bool DebugForces;
    float SteeringAngle;
    float SteeringAngleMax;
    float SideFrictionMultiplier;
    bool bGrounded;
    bool bHeadlightsOn;
    TArray<FVector> WheelLinearVelocity;
    float AirControlScalar;
    float AirControlGainSpeed;
    bool bPlayFuelSFX;
    float FuelAlertBlendVolume;
    float HornCooldown;
    bool bHornOnCooldown;
    float Fuel;
    bool bIgnition;
    bool bBraking;
    bool bReversing;
    float FuelConsumptionRate;
    bool bTiltAllowed;
    TMap<UPrimitiveComponent*, TEnumAsByte<ECollisionEnabled::Type>> PawnCollisionComponents;
    TMap<int32, APawn*> StoredPawns;
    FTransform CachedCamTransform;
    float CamZoomMin;
    float CamZoomMax;
    float ZoomSpeed;
    float ZoomSnapIncrements;
    float CameraZoom;
    TMap<TEnumAsByte<E_CargoType::Type>, int32> DefaultCargoPoints;
    float TireFriction;
    bool bHandbraking;
    float Friction;
    float HandbrakeFriction;
    float UphillTorque;
    float BaseTorque;
    float MinSpeedForTurn;
    bool bDebugPrints;
    bool bFreezePhysics;
    bool CheckingUnwedge;
    bool Unwedging;
    float EngineSoundPeakRPM;
    class ACharacter* PlayerCharacter;
    class APlayerController* PlayerController;
    bool bCanHighlight;
    TArray<int32> HighlightArray;
    FTimerHandle YeetTimer;
    bool bCanYeet;
    class UAudioComponent* BurnoutSound;
    float ForwardInput;
    bool InvertMouseY;
    float LastMoveForward;
    float MaxSpeed;
    float EngineAcceleration;
    float SpeedMultiplyer;
    float FuelMeshBottomLevel;
    float FuelMeshTopLevel;
    float TurnAssist;
    float SteeringSpeed;
    class UMaterialInterface* LightsOffMaterial;
    class UMaterialInterface* LightsOnMaterial;
    int32 HeadlightsMatIndex;
    class USoundBase* EngineIgnitionSound;
    bool HasDoors?;
    class USoundBase* HornSound;
    class USoundBase* EngineStopSound;
    class UAnimSequence* VehiclePose;
    float LocalWheelRotationAdd;
    TArray<class USpotLightComponent*> HeadlightArray;
    FText Name;
    FText Description;
    float CharacterSteering;
    float EngineSpeed;
    bool UseCameraYaw;

    void BPI_GetHighlightArray(TArray<int32>& HighlightArray);
    void BPI_SetHighlightArray(TArray<int32>& HighlightArray, bool& Result);
    void BPI_GetCanHighlight(bool& CanHighlight?);
    void ComponentsToSave(TArray<class UActorComponent*>& Components);
    void ExitTrace(const FVector ExitDirection, FVector& ExitLocation, bool& bBlockingHit);
    void SetExhaustSpawn(float Param);
    void SetSteeringRotation();
    float CalculateTireXForce(int32 Index);
    float CalcTireSlip(float Slip, bool bIsFrontTires);
    void UpdateEngineSpeed();
    void PostPlayerAttached(bool Attached?);
    void ToggleAffectNavigation(bool bCanAffectNavigation);
    void SetPhysicsDampening();
    void FindExitPoint(FVector& ExitPoint);
    void CanEnter?(bool& Result);
    void FreezePhysics(bool bNewState);
    void ForceWheelsToRestLength();
    void ApplyFriction();
    void OnLand();
    void TickCameraZoom(float DeltaTime);
    void DetachPawnFromVehicle();
    void AttachPawnToVehicle(class APawn* Pawn, int32 Index);
    void SetHeadlights(bool NewValue);
    void ToggleHeadlights();
    void DrawDebugForces();
    void ApplyWheelRotation();
    void ApplyTireForce(int32 Index);
    void GetTireForce(int32 Index);
    void GetWheelLinearVelocityLocal(int32 Index);
    void UpdateWheelLocation(int32 Index);
    void ApplySuspensionForce(int32 Index);
    void GetSuspensionForce(int32 Index);
    void UpdateSuspensionLength(int32 Index);
    void SuspensionInit();
    void SetupReferences();
    void RayInit();
    void RayCast();
    void UserConstructionScript();
    void TurnOnHeadlights__FinishedFunc();
    void TurnOnHeadlights__UpdateFunc();
    void BlendFuelSFX__FinishedFunc();
    void BlendFuelSFX__UpdateFunc();
    void Fuel Light Bleep__FinishedFunc();
    void Fuel Light Bleep__UpdateFunc();
    void CamTransition__FinishedFunc();
    void CamTransition__UpdateFunc();
    void InpActEvt_Jump_K2Node_InputActionEvent_1(FKey Key);
    void InpActEvt_Jump_K2Node_InputActionEvent_0(FKey Key);
    void HornFinishCooldown();
    void EnterVehicle(class APawn* Pawn);
    void StartCamTransition();
    void ReceiveBeginPlay();
    void InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0(float AxisValue);
    void ExitVehicle();
    void InpAxisEvt_MouseUp_K2Node_InputAxisEvent_4(float AxisValue);
    void InpAxisEvt_MouseRight_K2Node_InputAxisEvent_5(float AxisValue);
    void ReceiveTick(float DeltaSeconds);
    void ActorLoaded();
    void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1(float AxisValue);
    void ActorSaved();
    void ActorPreSave();
    void BPI_Unhighlight(class ABP_GameController_C* Controller);
    void BPI_Highlight(class ABP_GameController_C* Controller);
    void HasWater();
    void HasNoWater();
    void FOVChanged(float NewValue);
    void WaterParticleHit();
    void FuelVisualHeight();
    void Loaded();
    void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3(float AxisValue);
    void BPI_ToggleLookAt(class ABP_GameController_C* Controller, bool LookingAt?);
    void InvertMouseYChanged(bool NewValue);
    void LMBDownWhileDriving();
    void RMBDownWhileDriving();
    void OverrideMoveForward(float AxisValue);
    void ForceVehicleOff();
    void InWater(bool WaterBody?, class UPrimitiveComponent* Comp);
    void EDownWhileDriving();
    void EUpWhileDriving();
    void BndEvt__BP_ParentVehicle_Body_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
    void RMBUpWhileDriving();
    void Rotate1WhileDriving();
    void Rotate2WhileDriving();
    void Rotate3WhileDriving();
    void ExecuteUbergraph_BP_ParentVehicle(int32 EntryPoint);
};

#endif
