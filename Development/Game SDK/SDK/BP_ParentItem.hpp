#ifndef UE4SS_SDK_BP_ParentItem_HPP
#define UE4SS_SDK_BP_ParentItem_HPP

class ABP_ParentItem_C : public AActor
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UStaticMeshComponent* StaticMesh;
    int32 StoreSellPrice;
    bool PaidFor?;
    TEnumAsByte<E_ItemType::Type> ItemType;
    class AActor* BeingStoredBy;
    FText Name;
    FText Description;
    bool PreventLock?;
    FText URL Extension;
    bool InWater?;
    TArray<FS_MeshMaterials> MeshMats;
    class USoundBase* DropSound;
    class ABP_GameCharacter_C* BeingCarriedBy;
    TArray<TEnumAsByte<E_Badges::Type>> Badges;
    bool PreventPickup?;
    TEnumAsByte<E_ItemSpawnType::Type> SpawnType;
    class ABP_ParentItem_C* ProxyItem;
    FName Socket;
    class UAnimSequence* HoldPose;
    class UAnimMontage* PrimaryUseAnim;
    class UAnimMontage* SecondaryUseAnim;
    class UAnimMontage* NPC_UseAnim;
    class UAnimMontage* NPC_AcceptAnim;
    class UAnimMontage* NPC_RejectAnim;
    bool CreateProxy?;
    FTransform ProxyOffset;
    TArray<int32> HighlightArray;
    FBP_ParentItem_COnGrounded OnGrounded;
    void OnGrounded(class ABP_ParentItem_C* Item);
    float DefaultMass;
    FBP_ParentItem_COnStored OnStored;
    void OnStored(class ABP_ParentItem_C* Item, class UAC_Storage_C* Storage);
    TSoftObjectPtr<UTexture2D> Icon;
    TEnumAsByte<E_CurrencyType::Type> CurrencyType;
    FTimerHandle FlashRedTimerHandle;
    TArray<class UBoxComponent*> ConveyorsColliding;
    FVector SavedVelocity;
    TSoftObjectPtr<UTexture2D> Icon_Chalk;

    void BPI_GetCanHighlight(bool& CanHighlight?);
    void BPI_GetHighlightArray(TArray<int32>& HighlightArray);
    void BPI_SetHighlightArray(TArray<int32>& HighlightArray, bool& Result);
    void ComponentsToSave(TArray<class UActorComponent*>& Components);
    void BoundsCheck();
    void StoreMeshMats();
    FName GetAttachedMeshCollisionProfile(TEnumAsByte<E_PhyReact::Type> Index);
    void SetAttachedMeshCollisionProfile(class UStaticMeshComponent* Mesh, FName CollisionProfile);
    void MassReset(class UPrimitiveComponent* Mesh);
    void RemoveFromStorage();
    void CanChangeMeshCollisions?(class UPrimitiveComponent* Primitive, bool& Result);
    void ToggleHighlight(bool Highlight?);
    void PlaySecondaryUseAnim();
    void PlayPrimaryUseAnim();
    void ToggleOnlyOwnerSee(bool OnlyOwnerSee);
    void SetProxyCollisionVisibility();
    void ToggleProxyItem(bool Enabled?);
    void CreateProxyItem();
    void SetMeshPhysicalReaction(TEnumAsByte<E_PhyReact::Type> New Reaction, class UStaticMeshComponent* Mesh);
    void RevertMaterials();
    void Change Materials(class UMaterialInterface* Material);
    void LockPhysics();
    void PhysicsLockTimer();
    void Set Item Physical Reactions(TEnumAsByte<E_PhyReact::Type> New Reaction);
    void SetAllResponseToChannel(TEnumAsByte<ECollisionResponse> NewResponse, TEnumAsByte<ECollisionChannel> Channel);
    void ScanForDropCollision(bool& Can Drop?);
    void Scan for Items on Top();
    void UserConstructionScript();
    void OnCompleted_593CCD554D56E956B025F79362EFAA8E();
    void OverrideDroppedItem(class ABP_GameCharacter_C* Character);
    void OverrideLoaded();
    void OverridePickedup();
    void ItemPrecisionPlace(class ABP_GameCharacter_C* Player);
    void OverrideHighlighted();
    void OverrideUnhighlighted();
    void ItemDropped();
    void TriggerPhysics(float LockoutTime);
    void OverrideLockedPhysics();
    void FlashRed();
    void FlashRedTimer();
    void ItemPickedUp(class ABP_GameCharacter_C* Player);
    void ActorSaved();
    void Cooldown();
    void BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
    void BPI_ToggleLookAt(class ABP_GameController_C* Controller, bool LookingAt?);
    void OverrideAnimFinished();
    void OverrideHit(class AActor* OtherActor);
    void ShelfItem(class AActor* BeingStoredBy);
    void ReceiveBeginPlay();
    void PaidForItem();
    void ActorLoaded();
    void ReceiveDestroyed();
    void BPI_Unhighlight(class ABP_GameController_C* Controller);
    void BPI_Highlight(class ABP_GameController_C* Controller);
    void TriggerPhysicsKeepReact();
    void OverrideBeginPlay();
    void LoadCompleted();
    void OverridePickedupPreCarry();
    void ActorPreSave();
    void ExecuteUbergraph_BP_ParentItem(int32 EntryPoint);
    void OnStored__DelegateSignature(class ABP_ParentItem_C* Item, class UAC_Storage_C* Storage);
    void OnGrounded__DelegateSignature(class ABP_ParentItem_C* Item);
};

#endif
